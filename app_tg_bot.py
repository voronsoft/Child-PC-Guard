import logging
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from function import update_data_json, read_data_json

TOKEN = read_data_json("bot_token_telegram")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ –ø–æ–ª—É—á–∞–µ–º id –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã CPG
    chat_id = update.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id

    # –û–±–Ω–æ–≤–ª—è–µ–º id –≤ –ë–î
    update_data_json("id_tg_bot_parent", chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(f"–í–∞—à chat_id: {chat_id}")

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
            [KeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö"),
             KeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö")],
            [KeyboardButton("üíª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"),
             KeyboardButton("‚ö†Ô∏è –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")],
            [KeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")],
            [KeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
             KeyboardButton("‚è≤Ô∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    keyboard = [
            [InlineKeyboardButton("1 —á–∞—Å", callback_data='1'),
             InlineKeyboardButton("2 —á–∞—Å–∞", callback_data='2')],
            [InlineKeyboardButton("3 —á–∞—Å–∞", callback_data='3'),
             InlineKeyboardButton("4 —á–∞—Å–∞", callback_data='4')],
            [InlineKeyboardButton("5 —á–∞—Å–æ–≤", callback_data='5')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    time_selected = query.data
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {time_selected.replace('_', ' ')} —á–∞—Å–∞(–æ–≤) –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
                                   f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ —ç—Ç–æ–º.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö":
        await update.message.reply_text("üîí –ü–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    elif text == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö":
        await update.message.reply_text("üîì –ü–ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    elif text == "üíª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö":
        await update.message.reply_text("üíª –ü–ö –≤—ã–∫–ª—é—á–µ–Ω.")
    elif text == "‚ö†Ô∏è –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ":
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–≤–µ–¥–µ–Ω–æ.")
    elif text == "üì∑ –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É":
        await update.message.reply_text("üì∑ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞.")
    elif text == "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        await update.message.reply_text("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")
    elif text == "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        await update.message.reply_text("‚ñ∂Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.")
    elif text == "‚è≤Ô∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏":
        await choose_time(update, context)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—é
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_time_selection))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
